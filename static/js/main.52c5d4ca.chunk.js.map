{"version":3,"sources":["services/OlMapService.js","services/HouseFeatureService.js","services/RouteFeatureService.js","services/OlLayerService.js","services/OlSourceService.js","services/MapboxRouteService.js","components/Map.js","containers/MapContainer.js","components/MapToolbar.js","containers/MapToolbarContainer.js","components/Route.js","containers/RouteContainer.js","services/TestDataService.js","stores/HouseStore.js","stores/ToolbarStore.js","App.js","serviceWorker.js","index.js"],"names":["OlMapService","options","OlMap","View","defaultControls","lngLat","transform","styleCache","HouseFeatureService","houses","features","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","house","value","position","coordinates","lngLatTo3857","feature","Feature","Point","setProperties","push","err","return","childFeatures","get","size","length","isInRoute","find","childFeature","getProperties","indexInRoute","text","toString","strokeColor","zoneColor","style","concat","Style","image","createSquare","createCircle","createText","fillColor","Circle","radius","stroke","Stroke","width","color","fill","Fill","RegularShape","points","radius1","angle","Math","PI","Text","font","routeData","map","routeDataItem","type","geometry","latLngs","latLng","slice","reverse","GeoJSON","readFeatures","lineDash","OlLayerService","source","TileLayer","clusterSource","styleFunction","VectorLayer","OlSourceService","XYZ","VectorSource","vectorSource","clusterDistance","ClusterSource","distance","MapboxRouteService","positions","params","pos","join","overview","searchParams","Object","keys","key","encodeURIComponent","url","URL","fetch","method","headers","Content-Type","body","then","response","json","routes","route","polylineDecoder","decode","OlMapWrapper","styled","height","Map","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_initMap","mapContainer","React","createRef","_this2","view","createView","center","zoom","controls","createControls","baseLayerSource","createXYZSource","opaque","attributions","baseLayer","OlLayerSerice","createTileLayer","houseSource","createVectorSource","houseClusterSource","createClusterSource","houseLayer","createVectorLayer","clusterFeatureStyle","routeSource","routeLayer","RouteFeatureService","routeFeatureStyle","createMap","layers","target","on","eventData","forEachFeatureAtPixel","pixel","layer","removeHouseFromRoute","addHouseToRoute","routeHouses","getRouteHouses","getRoute","data","setRouteData","setStyle","clusterFeature","clear","addFeatures","createHouseFeatures","createRouteFeatures","react_default","a","createElement","ref","setTarget","current","_addHousesToMap","_addRouteToMap","Component","MapContainer","inject","observer","_ref","houseStore","toolbarStore","components_Map","filter","zone","name","includes","searchValueDelayed","SearchField","TextField","marginTop","marginLeft","MapToolbar","searchValueChangeTimeout","handleSearchValueChange","bind","assertThisInitialized","Toolbar","IconButton","edge","aria-label","title","menuButtonPushed","onClick","menuButtonClick","Close_default","Menu_default","clearButtonClick","DeleteOutline_default","label","margin","searchValue","onChange","MapToolbarContainer","components_MapToolbar","toggle","clearRoute","setSearchValue","StyledList","List","backgroundColor","theme","palette","background","paper","Route","index","listItems","ListItem","alignItems","flex","textAlign","marginRight","padding","borderRadius","ListItemText","primary","address","secondary","date","ListItemAvatar","Person_default","Drawer","anchor","variant","open","visible","PaperProps","routeDistance","RouteContainer","components_Route","ZONES","properties","TestDataService","testData","zoneIndex","forEach","zoneBbox","bbox","randomPoint","houseNumber","pointFeature","chief","photo","HouseStore","putHouses","getTestData","zonePallete","zoneColors","houseArray","zoneName","pop","observable","splice","i","sum","decorate","action","getHouses","computed","ToolbarStore","searchValueDelayedTimeout","clearTimeout","setTimeout","boxStyle","relativePos","stores","App","mobx_react_module","Box","display","flexDirection","justify","containers_MapToolbarContainer","flexGrow","minHeight","containers_RouteContainer","containers_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gaAwBeA,yGAjBIC,GACf,OAAO,IAAIC,IAAMD,sCAGDA,GAChB,OAAO,IAAIE,IAAKF,0CAGIA,GACpB,OAAOG,YAAgBH,wCAGLI,GAClB,OAAOC,YAAUD,EAAQ,YAAa,sBCftCE,EAAa,GAuGFC,mHApGcC,GACzB,IAAIC,EAAW,GADkBC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEjC,QAAAC,EAAAC,EAAkBP,EAAlBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA0B,KAAjBU,EAAiBN,EAAAO,MACpBC,EAAWF,EAAME,SACjBC,EAAcxB,EAAayB,aAAa,CAACF,EAAS,GAAIA,EAAS,KAE/DG,EAAU,IAAIC,IAAQ,IAAIC,IAAMJ,IACpCE,EAAQG,cAAc,CACpBR,MAAOA,IAGTX,EAASoB,KAAKJ,IAXiB,MAAAK,GAAAnB,GAAA,EAAAC,EAAAkB,EAAA,YAAApB,GAAA,MAAAK,EAAAgB,QAAAhB,EAAAgB,SAAA,WAAApB,EAAA,MAAAC,GAcjC,OAAOH,8CAGkBgB,GACzB,IAAMO,EAAgBP,EAAQQ,IAAI,YAC5BC,EAAOF,EAAcG,OAEvBC,IAAcJ,EAAcK,KAAK,SAAAC,GAGnC,OAF0BA,EAAaC,gBACPnB,MACnBoB,cAAgB,IAG3BA,GAAgB,EAChBC,EAAOP,EAAKQ,WACZC,EAAc,UAClB,GAAa,IAATT,EAAY,CACd,IACMd,EADoBY,EAAc,GAAGO,gBACXnB,MAChCuB,EAAcvB,EAAMwB,UAGlBH,GAFFD,EAAepB,EAAMoB,eACD,GACVA,EAAe,GAAGE,WAEnB,GAIX,IAAIG,EAAQvC,EAAU,GAAAwC,OAAIZ,EAAJ,KAAAY,OAAYV,EAAZ,KAAAU,OAAyBN,IAW/C,OAVKK,IACHA,EAAQ,IAAIE,IAAM,CAChBC,MACW,IAATd,EACI3B,EAAoB0C,aAAaN,EAAaP,GAC9C7B,EAAoB2C,aAAad,GACvCK,KAAMlC,EAAoB4C,WAAWV,KAEvCnC,EAAW4B,GAAQW,GAEdA,uCAGWT,GAClB,IACMgB,EAAYhB,EAAY,UAAY,OAE1C,OAAO,IAAIiB,IAAO,CAChBC,OAAQ,GACRC,OAAQ,IAAIC,IAAO,CACjBC,MAAO,EACPC,MAPgB,YASlBC,KAAM,IAAIC,IAAK,CACbF,MAAON,2CAKOT,EAAaP,GAC/B,IAAMgB,EAAYhB,EAAY,UAAY,OAE1C,OAAO,IAAIyB,IAAa,CACtBC,OAAQ,EACRC,QAAS,GACTC,MAAOC,KAAKC,GAAK,EACjBX,OAAQ,IAAIC,IAAO,CACjBC,MAAO,EACPC,MAAOf,IAETgB,KAAM,IAAIC,IAAK,CACbF,MAAON,yCAKKX,GAChB,OAAO,IAAI0B,IAAK,CACdC,KAAM,0DACN3B,KAAMA,EACNkB,KAAM,IAAIC,IAAK,CACbF,MAAO,6BCjEAnD,mHAhCc8D,GACzB,IAAI5D,EAAW4D,EAAUC,IAAI,SAAAC,GAK3B,MAAO,CACLC,KAAM,UACNC,SAAU,CACRlD,YAPqBgD,EAAcG,QAAQJ,IAAI,SAAAK,GACjD,OAAO5E,EAAayB,aAAamD,EAAOC,QAAQC,aAO9CL,KAAM,iBAKZ,OAAO,IAAIM,KAAUC,aAAa,CAChCP,KAAM,oBACN/D,SAAUA,8CAIWgB,GACvB,OAAO,IAAIsB,IAAM,CACfQ,OAAQ,IAAIC,IAAO,CACjBwB,SAAU,CAAC,GACXtB,MAAO,QACPD,MAAO,iCCVAwB,+GAlBUC,GACrB,OAAO,IAAIC,IAAU,CACnBD,OAAQA,8CAIaE,EAAeC,GAQtC,OAPqB,IAAIC,IAAY,CACnCJ,OAAQE,EACRvC,MAAO,SAAApB,GACL,OAAO4D,EAAc5D,0CCSd8D,+GAlBUvF,GACrB,OAAO,IAAIwF,IAAIxF,8CAGSS,GACxB,OAAO,IAAIgF,IAAa,CACtBhF,SAAUA,gDAIaiF,EAAcC,GACvC,OAAO,IAAIC,IAAc,CACvBC,SAAUF,EACVT,OAAQQ,+BCyCCI,wGAnDGC,GAEd,IAUMC,EAAS,CACbzE,YAXkBwE,EACjBzB,IAAI,SAAA2B,GACH,OAAOA,EACJrB,QACAC,UACAqB,KAAK,OAETA,KAAK,KAKNC,SAAU,QAINC,EAAeC,OAAOC,KAAKN,GAC9B1B,IAAI,SAAAiC,GACH,OAAOC,mBAAmBD,GAAO,IAAMC,mBAAmBR,EAAOO,MAElEL,KAAK,KAGFO,EAAM,IAAIC,IAAJ,GAAA5D,OA5BO,sDA4BP,kBAAAA,OA7Bd,8FAkCE,OAAO6D,MAAMF,EAAK,CAChBG,OAAQ,OACRC,QAAS,CACPC,eAAgB,mDAElBC,KAAMX,IAELY,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAA3C,GACJ,OAAOA,EAAU8C,OAAO7C,IAAI,SAAA8C,GAC1B,MAAO,CACL1C,QAAS2C,IAAgBC,OAAOF,EAAM3C,UACtCoB,SAAUuB,EAAMvB,uBCxCtB0B,EAAeC,YAAO,MAAPA,CAAc,CACjCC,OAAQ,SAqIKC,cAjIb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,KAAAJ,IACjBE,EAAAvB,OAAA0B,EAAA,EAAA1B,CAAAyB,KAAAzB,OAAA2B,EAAA,EAAA3B,CAAAqB,GAAAO,KAAAH,KAAMH,KACDrD,IAAM,KACXsD,EAAKM,WACLN,EAAKO,aAAeC,IAAMC,YAJTT,0EAMR,IAAAU,EAAAR,KAEHS,EAAOxI,EAAayI,WAAW,CACnCC,OAAQ1I,EAAayB,aAAa,CAAC,UAAW,YAC9CkH,KAAM,IAIFC,EAAW5I,EAAa6I,eAAe,CAAEF,MAAM,IAG/CG,EAAkBtD,EAAgBuD,gBAAgB,CACtDrC,IAAK,+CACLsC,QAAQ,EACRC,aAAc,CACZ,mFACA,uEAGEC,EAAYC,EAAcC,gBAAgBN,GAG1CO,EAAc7D,EAAgB8D,mBAAmB,IACjDC,EAAqB/D,EAAgBgE,oBACzCH,EACA,IAEII,EAAaN,EAAcO,kBAC/BH,EACA/I,EAAoBmJ,qBAGtB5B,KAAKsB,YAAcA,EAGnB,IAAMO,EAAcpE,EAAgB8D,mBAAmB,IACjDO,EAAaV,EAAcO,kBAC/BE,EACAE,EAAoBC,mBAEtBhC,KAAK6B,YAAcA,EAGnB7B,KAAKxD,IAAMvE,EAAagK,UAAU,CAChCC,OAAQ,CAACf,EAAWO,EAAYI,GAChCK,OAAQ,KACRtB,SAAUA,EACVJ,KAAMA,IAIRT,KAAKxD,IAAI4F,GAAG,QAAS,SAAAC,GACnB7B,EAAKhE,IAAI8F,sBAAsBD,EAAUE,MAAO,SAAC5I,EAAS6I,GAGxD,IAAMtI,EAAgBP,EAAQQ,IAAI,YAGlC,GAAKD,GAA0C,IAAzBA,EAAcG,OAApC,CAKA,IAEMf,EAFaY,EAAc,GACMO,gBACPnB,MAC5BA,EAAMoB,cAAgB,EACxB8F,EAAKX,MAAM4C,qBAAqBnJ,GAEhCkH,EAAKX,MAAM6C,gBAAgBpJ,GAI7B,IAAMqJ,EAAcnC,EAAKX,MAAM+C,iBAC3BD,EAAYtI,OAAS,EACvB2D,EAAmB6E,SACjBF,EAAYnG,IAAI,SAAAlD,GACd,OAAOA,EAAME,YAEf0F,KAAK,SAAA4D,GACLtC,EAAKX,MAAMkD,aAAaD,KAG1BtC,EAAKX,MAAMkD,aAAa,MAI1BpJ,EAAQqJ,SAAS,SAAAC,GACf,OAAOxK,EAAoBmJ,oBAAoBqB,oDAMrDjD,KAAKsB,YAAY4B,QACjBlD,KAAKsB,YAAY6B,YACf1K,EAAoB2K,oBAAoBpD,KAAKH,MAAMnH,kDAIrDsH,KAAK6B,YAAYqB,QACblD,KAAKH,MAAMtD,WACbyD,KAAK6B,YAAYsB,YACfpB,EAAoBsB,oBAAoBrD,KAAKH,MAAMtD,6CAKvD,OAAO+G,EAAAC,EAAAC,cAAC/D,EAAD,CAAcgE,IAAKzD,KAAKK,2DAI/BL,KAAKxD,IAAIkH,UAAU1D,KAAKK,aAAasD,SAGrC3D,KAAK4D,+DAGL5D,KAAK4D,kBACL5D,KAAK6D,wBA9HSC,aCSHC,EAnBMC,YAAO,aAAc,eAArBA,CACnBC,YAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAYC,EAAfF,EAAeE,aAAf,OACPd,EAAAC,EAAAC,cAACa,EAAD,CACE3L,OAAQyL,EAAWzL,OAAO4L,OAAO,SAAAhL,GAC/B,OAAOA,EAAMiL,KAAKC,KAAKC,SAASL,EAAaM,sBAE/ChC,gBAAiB,SAAApJ,GAAK,OAAI6K,EAAWzB,gBAAgBpJ,IACrDmJ,qBAAsB,SAAAnJ,GAAK,OAAI6K,EAAW1B,qBAAqBnJ,IAC/DsJ,eAAgB,WACd,OAAOuB,EAAWvB,kBAEpBrG,UAAW4H,EAAW5H,UACtBwG,aAAc,SAAAxG,GACZ4H,EAAWpB,aAAaxG,mGCT1BoI,GAAcjF,YAAOkF,KAAPlF,CAAkB,CACpCmF,UAAW,EACXC,WAAY,SAgDCC,eA5Cb,SAAAA,EAAYlF,GAAO,IAAAC,EAAA,OAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,KAAA+E,IACjBjF,EAAAvB,OAAA0B,EAAA,EAAA1B,CAAAyB,KAAAzB,OAAA2B,EAAA,EAAA3B,CAAAwG,GAAA5E,KAAAH,KAAMH,KACDmF,yBAA2B,KAChClF,EAAKmF,wBAA0BnF,EAAKmF,wBAAwBC,KAA7B3G,OAAA4G,EAAA,EAAA5G,CAAAuB,IAHdA,wEAMjB,OACEwD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,KAAK,QACL1J,MAAM,UACN2J,aAAW,OACXC,MACExF,KAAKH,MAAM4F,iBACP,4JACA,wKAENC,QAAS1F,KAAKH,MAAM8F,iBAEnB3F,KAAKH,MAAM4F,iBAAmBnC,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,MAAgBD,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,OAEjDD,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEzJ,MAAM,UACN2J,aAAW,OACXC,MAAO,8FACPE,QAAS1F,KAAKH,MAAMiG,kBAEpBxC,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,OAEFD,EAAAC,EAAAC,cAACmB,GAAD,CACEqB,MAAM,mIACNtJ,KAAK,SACLuJ,OAAO,SACP1M,MAAOyG,KAAKH,MAAMqG,YAClBC,SAAUnG,KAAKiF,2EAKC5C,GACtBrC,KAAKH,MAAMsG,SAAS9D,UAzCCyB,aCKVsC,GAdapC,YAAO,eAAgB,aAAvBA,CAC1BC,YAAS,SAAAC,GAAA,IAAGE,EAAHF,EAAGE,aAAcD,EAAjBD,EAAiBC,WAAjB,OACPb,EAAAC,EAAAC,cAAC6C,GAAD,CACEZ,iBAAkBrB,EAAaqB,iBAC/BE,gBAAiB,kBAAMvB,EAAakC,UACpCR,iBAAkB,kBAAM3B,EAAWoC,cACnCL,YAAa9B,EAAa8B,YAC1BC,SAAU,SAAA9D,GACR+B,EAAaoC,eAAenE,EAAUF,OAAO5I,8FCJ/CkN,GAAa/G,aAAOgH,KAAPhH,CAAa,SAAAwE,GAAA,MAAgB,CAC9CvI,MAAO,IACPgL,gBAF8BzC,EAAG0C,MAEVC,QAAQC,WAAWC,SAuD7BC,GApDD,SAAAnH,GACZ,IAAIoH,EAAQ,EACNC,EAAYrH,EAAMnH,OAAO8D,IAAI,SAAAlD,GAAK,OACtCgK,EAAAC,EAAAC,cAAC2D,GAAA,EAAD,CAAUC,WAAW,aAAa3I,IAAKwI,KACrC3D,EAAAC,EAAAC,cAAA,OACEzI,MAAO,CACL4L,gBAAiBrN,EAAMwB,UACvBuM,KAAM,WACNC,UAAW,SACXzC,UAAW,OACX0C,YAAa,OACbC,QAAS,MACTC,aAAc,MACd7L,MAAO,SAGRtC,EAAMiL,KAAKC,MAEdlB,EAAAC,EAAAC,cAACkE,GAAA,EAAD,CACEC,QAASrO,EAAMsO,QACfC,UAAW,qIAA8BvO,EAAMwO,OAEjDxE,EAAAC,EAAAC,cAACuE,GAAA,EAAD,KACEzE,EAAAC,EAAAC,cAACwE,GAAAzE,EAAD,UAKN,OACED,EAAAC,EAAAC,cAACyE,GAAA,EAAD,CACEC,OAAO,OACPC,QAAQ,aACRC,KAAMvI,EAAMwI,QACZC,WAAY,CACVvN,MAAO,CAAEvB,SAAU,cAGrB8J,EAAAC,EAAAC,cAACiD,GAAD,KACEnD,EAAAC,EAAAC,cAAC2D,GAAA,EAAD,CAAUC,WAAW,SAAS3I,IAAK,WACjC6E,EAAAC,EAAAC,cAACkE,GAAA,EAAD,CAAcC,QAAO,oFAAA3M,OAAqB6E,EAAM0I,cAA3B,cAED,IAArBrB,EAAU7M,QACTiJ,EAAAC,EAAAC,cAAC2D,GAAA,EAAD,CAAUC,WAAW,SAAS3I,IAAK,WACjC6E,EAAAC,EAAAC,cAACkE,GAAA,EAAD,CAAcC,QAAS,oJAG1BT,KC7CMsB,GAVQxE,YAAO,aAAc,eAArBA,CACrBC,YAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAYC,EAAfF,EAAeE,aAAf,OACPd,EAAAC,EAAAC,cAACiF,GAAD,CACEJ,QAASjE,EAAaqB,iBACtB/M,OAAQyL,EAAWxB,YAAY7F,QAC/ByL,cAAepE,EAAWoE,2DCN1BG,GAAQ,CACZhM,KAAM,oBACN/D,SAAU,CACR,CACE+D,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,uBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,oBACpB,CAAC,mBAAoB,oBACrB,CAAC,mBAAoB,mBACrB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,wBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,iBAAkB,mBACnB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,oBACpB,CAAC,iBAAkB,oBACnB,CAAC,iBAAkB,uBAK3B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,uBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,uBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,oBACpB,CAAC,mBAAoB,oBACrB,CAAC,mBAAoB,mBACrB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,wBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,uBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,uBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,kBACpB,CAAC,kBAAmB,kBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,sBAK5B,CACEiD,KAAM,UACNiM,WAAY,GACZhM,SAAU,CACRD,KAAM,UACNjD,YAAa,CACX,CACE,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,yBAyCjBmP,8GA/BX,IAAIC,EAAW,GACXC,EAAY,EA0BhB,OAxBAJ,GAAM/P,SAASoQ,QAAQ,SAAApP,GACrB,IAAMqP,EAAWC,KAAKtP,GAChBqC,EAASkN,uBA9KD,GA8K0B,CAAED,KAAMD,IAC5CG,EAAc,EAElBnN,EAAOrD,SAASoQ,QAAQ,SAAAK,GACtBP,EAAS9O,KAAK,CACZ6N,QAAO,0FAAA5M,OAA2BmO,GAClC3P,SAAU4P,EAAazM,SAASlD,YAAYqD,QAAQC,UACpD+K,KAAM,aACNvD,KAAM,CACJC,KAAI,WAAAxJ,OAAQ8N,GACZO,MAAO,CACL7E,KAAM,iHACN8E,MAAO,OAIbH,MAGFL,MAGKD,WCpMLU,cAKJ,SAAAA,IAAehL,OAAAwB,EAAA,EAAAxB,CAAAyB,KAAAuJ,GAAAvJ,KAJftH,OAAS,GAIKsH,KAHd2C,YAAc,GAGA3C,KAFdzD,UAAY,KAGVyD,KAAKtH,OAAS,GACdsH,KAAK2C,YAAc,GACnB3C,KAAKzD,UAAY,KAGjByD,KAAKwJ,UAAUZ,GAAgBa,qEAGvBvD,GACR,OAAOlG,KAAKtH,OAAO4L,OAAO,SAAAhL,GACxB,OAAOA,EAAMiL,KAAKC,KAAKC,SAASyB,uCAI1BxN,GACR,IAAIgR,EAAc,CAChB,UAEA,UAEA,UAEA,UAEA,UAEA,UAEA,UAEA,UAEA,UAEA,WAEEC,EAAa,GAEbC,EAAa,GACjBlR,EAAOqQ,QAAQ,SAAAzP,GACbA,EAAMoB,cAAgB,EACtB,IAAMmP,EAAWvQ,EAAMiL,KAAKC,KACvBmF,EAAWE,KACdF,EAAWE,GAAYH,EAAYI,OAAS,WAE9CxQ,EAAMwB,UAAY6O,EAAWE,GAE7BD,EAAW7P,KAAKgQ,aAAWzQ,MAE7B0G,KAAKtH,OAASkR,0CAGAtQ,GACV0G,KAAK2C,YAAY8B,SAASnL,KAG9BA,EAAMoB,aAAesF,KAAK2C,YAAYtI,OACtC2F,KAAK2C,YAAY5I,KAAKT,iDAGHA,GACnB,IAC0B,IAAxBA,EAAMoB,cACNpB,EAAMoB,aAAesF,KAAK2C,YAAYtI,OACtC,CACA2F,KAAK2C,YAAYqH,OAAO1Q,EAAMoB,aAAc,GAG5C,IAAK,IAAIuP,EAAI3Q,EAAMoB,aAAcuP,EAAIjK,KAAK2C,YAAYtI,SAAU4P,EAC9DjK,KAAK2C,YAAYsH,GAAGvP,aAAeuP,EAGrC3Q,EAAMoB,cAAgB,4CAKxB,OAAOsF,KAAK2C,iDAIZ3C,KAAK2C,YAAYoG,QAAQ,SAAAzP,GACvBA,EAAMoB,cAAgB,IAExBsF,KAAK2C,YAAYqH,OAAO,EAAGhK,KAAK2C,YAAYtI,QAC5C2F,KAAKzD,UAAY,0CAGNA,GACXyD,KAAKzD,UAAYA,wCAIjB,IAAI2N,EAAM,EAQV,OANIlK,KAAKzD,WACPyD,KAAKzD,UAAUwM,QAAQ,SAAAtM,GACrByN,GAAOzN,EAAcsB,WAIlBmM,WAIXC,aAASZ,GAAY,CACnB7Q,OAAQqR,KACRpH,YAAaoH,KACbxN,UAAWwN,KACXlL,MAAOuL,KACPZ,UAAWY,KACX1H,gBAAiB0H,KACjB3H,qBAAsB2H,KACtBxH,eAAgBwH,KAChBC,UAAWD,KACX7D,WAAY6D,KACZrH,aAAcqH,KACd7B,cAAe+B,OAGjB,IAEenG,GAFI,IAAIoF,GC/HjBgB,cAKJ,SAAAA,IAAehM,OAAAwB,EAAA,EAAAxB,CAAAyB,KAAAuK,GAAAvK,KAJfyF,kBAAmB,EAILzF,KAHdkG,YAAc,GAGAlG,KAFd0E,mBAAqB,GAGnB1E,KAAKyF,kBAAmB,EACxBzF,KAAKkG,YAAc,GACnBlG,KAAK0E,mBAAqB,GAC1B1E,KAAKwK,0BAA4B,0DAIjCxK,KAAKyF,kBAAoBzF,KAAKyF,wDAGjBlM,GAAO,IAAAuG,EAAAE,KACpBA,KAAKkG,YAAc3M,EAEfyG,KAAKwK,2BACPC,aAAazK,KAAKwK,2BAGpBxK,KAAKwK,0BAA4BE,WAAW,WAC1C5K,EAAK4E,mBAAqBnL,GACzB,cAIP4Q,aAASI,GAAc,CACrBrE,YAAa6D,KACbrF,mBAAoBqF,KACpBtE,iBAAkBsE,KAClBvD,eAAgB4D,KAChB9D,OAAQ8D,OAGV,IAAMhG,GAAe,IAAImG,GCzBnBI,GAAW,CACfhL,OAAQ,QAGJiL,GAAc,CAClBpR,SAAU,YAGNqR,GAAS,CAAE1G,cAAYC,aDmBdA,ICOA0G,oLAtBX,OACExH,EAAAC,EAAAC,cAACuH,EAAA,EAAaF,GACZvH,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,SACdC,QAAQ,aACR/D,WAAW,UACXrM,MAAO4P,IAEPrH,EAAAC,EAAAC,cAACwH,EAAA,EAAD,KACE1H,EAAAC,EAAAC,cAAC4H,GAAD,OAEF9H,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAKK,SAAU,EAAGC,UAAW,EAAGvQ,MAAO6P,IACrCtH,EAAAC,EAAAC,cAAC+H,GAAD,MACAjI,EAAAC,EAAAC,cAACgI,EAAD,gBAhBM1H,aCZE2H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzI,EAAAC,EAAAC,cAACwI,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnN,KAAK,SAAAoN,GACjCA,EAAaC","file":"static/js/main.52c5d4ca.chunk.js","sourcesContent":["import 'ol/ol.css';\nimport { defaults as defaultControls } from 'ol/control.js';\nimport OlMap from 'ol/Map';\nimport { transform } from 'ol/proj';\nimport View from 'ol/View.js';\n\nclass OlMapService {\n  static createMap(options) {\n    return new OlMap(options);\n  }\n\n  static createView(options) {\n    return new View(options);\n  }\n\n  static createControls(options) {\n    return defaultControls(options);\n  }\n\n  static lngLatTo3857(lngLat) {\n    return transform(lngLat, 'EPSG:4326', 'EPSG:3857');\n  }\n}\n\nexport default OlMapService;\n","import Feature from 'ol/Feature.js';\nimport Point from 'ol/geom/Point.js';\nimport { Circle, RegularShape, Fill, Stroke, Style, Text } from 'ol/style.js';\nimport OlMapService from './OlMapService';\n\nlet styleCache = {};\n\nclass HouseFeatureService {\n  static createHouseFeatures(houses) {\n    let features = [];\n    for (let house of houses) {\n      let position = house.position;\n      let coordinates = OlMapService.lngLatTo3857([position[1], position[0]]);\n\n      let feature = new Feature(new Point(coordinates));\n      feature.setProperties({\n        house: house\n      });\n\n      features.push(feature);\n    }\n\n    return features;\n  }\n\n  static clusterFeatureStyle(feature) {\n    const childFeatures = feature.get('features');\n    const size = childFeatures.length;\n\n    let isInRoute = !!childFeatures.find(childFeature => {\n      const featureProperties = childFeature.getProperties();\n      const house = featureProperties.house;\n      return house.indexInRoute > -1;\n    });\n\n    let indexInRoute = -1;\n    let text = size.toString();\n    let strokeColor = '#3399CC';\n    if (size === 1) {\n      const featureProperties = childFeatures[0].getProperties();\n      const house = featureProperties.house;\n      strokeColor = house.zoneColor;\n      indexInRoute = house.indexInRoute;\n      if (indexInRoute > -1) {\n        text = (indexInRoute + 1).toString();\n      } else {\n        text = '';\n      }\n    }\n\n    let style = styleCache[`${size}_${isInRoute}_${indexInRoute}`];\n    if (!style) {\n      style = new Style({\n        image:\n          size === 1\n            ? HouseFeatureService.createSquare(strokeColor, isInRoute)\n            : HouseFeatureService.createCircle(isInRoute),\n        text: HouseFeatureService.createText(text)\n      });\n      styleCache[size] = style;\n    }\n    return style;\n  }\n\n  static createCircle(isInRoute) {\n    const strokeColor = '#3399CC';\n    const fillColor = isInRoute ? '#ffcc80' : '#fff';\n\n    return new Circle({\n      radius: 15,\n      stroke: new Stroke({\n        width: 2,\n        color: strokeColor\n      }),\n      fill: new Fill({\n        color: fillColor\n      })\n    });\n  }\n\n  static createSquare(strokeColor, isInRoute) {\n    const fillColor = isInRoute ? '#ffcc80' : '#fff';\n\n    return new RegularShape({\n      points: 4,\n      radius1: 15,\n      angle: Math.PI / 2,\n      stroke: new Stroke({\n        width: 2,\n        color: strokeColor\n      }),\n      fill: new Fill({\n        color: fillColor\n      })\n    });\n  }\n\n  static createText(text) {\n    return new Text({\n      font: 'bold 11px \"Open Sans\", \"Arial Unicode MS\", \"sans-serif\"',\n      text: text,\n      fill: new Fill({\n        color: '#333'\n      })\n    });\n  }\n}\n\nexport default HouseFeatureService;\n","import { Stroke, Style } from 'ol/style.js';\nimport GeoJSON from 'ol/format/GeoJSON.js';\nimport OlMapService from './OlMapService';\n\nclass HouseFeatureService {\n  static createRouteFeatures(routeData) {\n    let features = routeData.map(routeDataItem => {\n      const routeCoordinates = routeDataItem.latLngs.map(latLng => {\n        return OlMapService.lngLatTo3857(latLng.slice().reverse());\n      });\n\n      return {\n        type: 'Feature',\n        geometry: {\n          coordinates: routeCoordinates,\n          type: 'LineString'\n        }\n      };\n    });\n\n    return new GeoJSON().readFeatures({\n      type: 'FeatureCollection',\n      features: features\n    });\n  }\n\n  static routeFeatureStyle(feature) {\n    return new Style({\n      stroke: new Stroke({\n        lineDash: [4],\n        color: 'green',\n        width: 2\n      })\n    });\n  }\n}\n\nexport default HouseFeatureService;\n","import { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer.js';\n\nclass OlLayerService {\n  static createTileLayer(source) {\n    return new TileLayer({\n      source: source\n    });\n  }\n\n  static createVectorLayer(clusterSource, styleFunction) {\n    const clusterLayer = new VectorLayer({\n      source: clusterSource,\n      style: feature => {\n        return styleFunction(feature);\n      }\n    });\n\n    return clusterLayer;\n  }\n}\n\nexport default OlLayerService;\n","import { Cluster as ClusterSource, Vector as VectorSource } from 'ol/source.js';\nimport XYZ from 'ol/source/XYZ.js';\n\nclass OlSourceService {\n  static createXYZSource(options) {\n    return new XYZ(options);\n  }\n\n  static createVectorSource(features) {\n    return new VectorSource({\n      features: features\n    });\n  }\n\n  static createClusterSource(vectorSource, clusterDistance) {\n    return new ClusterSource({\n      distance: clusterDistance,\n      source: vectorSource\n    });\n  }\n}\n\nexport default OlSourceService;\n","import polylineDecoder from '@mapbox/polyline';\n\nconst MAPBOX_ACCESS_TOKEN =\n  'pk.eyJ1IjoiYnVyb3Z5YSIsImEiOiJjanVucnE3bHMweHRlM3pvNXAycXllaHl5In0.ytKUDnITJq8JScaXHW3qzQ';\nconst MAPBOX_API_URL = 'https://api.mapbox.com/directions/v5/mapbox/walking';\n\nclass MapboxRouteService {\n  static getRoute(positions) {\n    //Преобразование массива координат [lat,lng] в строку lng,lat;lng,lat\n    const coordinates = positions\n      .map(pos => {\n        return pos\n          .slice()\n          .reverse()\n          .join(',');\n      })\n      .join(';');\n\n    //Объект с параметрами запроса\n    const params = {\n      coordinates: coordinates,\n      overview: 'full'\n    };\n\n    //Формирование параметра для application/x-www-form-urlencoded\n    const searchParams = Object.keys(params)\n      .map(key => {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n      })\n      .join('&');\n\n    //Url для запроса\n    const url = new URL(\n      `${MAPBOX_API_URL}?access_token=${MAPBOX_ACCESS_TOKEN}`\n    );\n\n    //Запрос на построение маршрута\n    return fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      },\n      body: searchParams\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(routeData => {\n        return routeData.routes.map(route => {\n          return {\n            latLngs: polylineDecoder.decode(route.geometry),\n            distance: route.distance\n          };\n        });\n      });\n  }\n}\n\nexport default MapboxRouteService;\n","import React, { Component } from 'react';\nimport { styled } from '@material-ui/styles';\n\n//Map services\nimport HouseFeatureService from '../services/HouseFeatureService';\nimport RouteFeatureService from '../services/RouteFeatureService';\nimport OlLayerSerice from '../services/OlLayerService';\nimport OlMapService from '../services/OlMapService';\nimport OlSourceService from '../services/OlSourceService';\nimport MapboxRouteService from '../services/MapboxRouteService';\n\nconst OlMapWrapper = styled('div')({\n  height: '100%'\n});\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.map = null;\n    this._initMap();\n    this.mapContainer = React.createRef();\n  }\n  _initMap() {\n    //По умолчанию зум 8 и центр на Москву\n    const view = OlMapService.createView({\n      center: OlMapService.lngLatTo3857([37.618423, 55.751244]),\n      zoom: 8\n    });\n\n    //Отключение кнопок зума\n    const controls = OlMapService.createControls({ zoom: false });\n\n    //Базовый слой (Карта \"Спутник\")\n    const baseLayerSource = OlSourceService.createXYZSource({\n      url: 'http://{a-c}.tilessputnik.ru/{z}/{x}/{y}.png',\n      opaque: false,\n      attributions: [\n        '<a href=\"https://maps.sputnik.ru\">Спутник</a>',\n        '© Ростелеком'\n      ]\n    });\n    const baseLayer = OlLayerSerice.createTileLayer(baseLayerSource);\n\n    //Кластерный слой для домов\n    const houseSource = OlSourceService.createVectorSource([]);\n    const houseClusterSource = OlSourceService.createClusterSource(\n      houseSource,\n      40 //clusterDistance\n    );\n    const houseLayer = OlLayerSerice.createVectorLayer(\n      houseClusterSource,\n      HouseFeatureService.clusterFeatureStyle\n    );\n    //В этот источник будут добавлятся сущности домов\n    this.houseSource = houseSource;\n\n    //Слой для маршрута\n    const routeSource = OlSourceService.createVectorSource([]);\n    const routeLayer = OlLayerSerice.createVectorLayer(\n      routeSource,\n      RouteFeatureService.routeFeatureStyle\n    );\n    this.routeSource = routeSource;\n\n    //Создание карты\n    this.map = OlMapService.createMap({\n      layers: [baseLayer, houseLayer, routeLayer],\n      target: null,\n      controls: controls,\n      view: view\n    });\n\n    //Подписка на событие клика на карте\n    this.map.on('click', eventData => {\n      this.map.forEachFeatureAtPixel(eventData.pixel, (feature, layer) => {\n        //На карте кластеризованные сущности\n        //Получение сущностей входящих в кластер\n        const childFeatures = feature.get('features');\n\n        //Проверка на то, что в кластере только одна сущность\n        if (!childFeatures || childFeatures.length !== 1) {\n          return;\n        }\n\n        //Добавление или удаление сущности из маршрута\n        let childFeature = childFeatures[0];\n        const featureProperties = childFeature.getProperties();\n        const house = featureProperties.house;\n        if (house.indexInRoute > -1) {\n          this.props.removeHouseFromRoute(house);\n        } else {\n          this.props.addHouseToRoute(house);\n        }\n\n        //Получение маршрута\n        const routeHouses = this.props.getRouteHouses();\n        if (routeHouses.length > 1) {\n          MapboxRouteService.getRoute(\n            routeHouses.map(house => {\n              return house.position;\n            })\n          ).then(data => {\n            this.props.setRouteData(data);\n          });\n        } else {\n          this.props.setRouteData(null);\n        }\n\n        //Установка стиля отображения дома на карте\n        feature.setStyle(clusterFeature => {\n          return HouseFeatureService.clusterFeatureStyle(clusterFeature);\n        });\n      });\n    });\n  }\n  _addHousesToMap() {\n    this.houseSource.clear();\n    this.houseSource.addFeatures(\n      HouseFeatureService.createHouseFeatures(this.props.houses)\n    );\n  }\n  _addRouteToMap() {\n    this.routeSource.clear();\n    if (this.props.routeData) {\n      this.routeSource.addFeatures(\n        RouteFeatureService.createRouteFeatures(this.props.routeData)\n      );\n    }\n  }\n  render() {\n    return <OlMapWrapper ref={this.mapContainer} />;\n  }\n  componentDidMount() {\n    //Установка карты в dom\n    this.map.setTarget(this.mapContainer.current);\n\n    //Добавление домов на карту\n    this._addHousesToMap();\n  }\n  componentDidUpdate() {\n    this._addHousesToMap();\n    this._addRouteToMap();\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport Map from '../components/Map';\n\nconst MapContainer = inject('houseStore', 'toolbarStore')(\n  observer(({ houseStore, toolbarStore }) => (\n    <Map\n      houses={houseStore.houses.filter(house => {\n        return house.zone.name.includes(toolbarStore.searchValueDelayed);\n      })}\n      addHouseToRoute={house => houseStore.addHouseToRoute(house)}\n      removeHouseFromRoute={house => houseStore.removeHouseFromRoute(house)}\n      getRouteHouses={() => {\n        return houseStore.getRouteHouses();\n      }}\n      routeData={houseStore.routeData}\n      setRouteData={routeData => {\n        houseStore.setRouteData(routeData);\n      }}\n    />\n  ))\n);\n\nexport default MapContainer;\n","import React, { Component } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/DeleteOutline';\nimport TextField from '@material-ui/core/TextField';\nimport { styled } from '@material-ui/styles';\n\nconst SearchField = styled(TextField)({\n  marginTop: 0,\n  marginLeft: '16px'\n});\n\nclass MapToolbar extends Component {\n  constructor(props) {\n    super(props);\n    this.searchValueChangeTimeout = null;\n    this.handleSearchValueChange = this.handleSearchValueChange.bind(this);\n  }\n  render() {\n    return (\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"Menu\"\n          title={\n            this.props.menuButtonPushed\n              ? 'Скрыть список домов маршрута'\n              : 'Показать список домов маршрута'\n          }\n          onClick={this.props.menuButtonClick}\n        >\n          {this.props.menuButtonPushed ? <CloseIcon /> : <MenuIcon />}\n        </IconButton>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"Menu\"\n          title={'Очистить маршрут'}\n          onClick={this.props.clearButtonClick}\n        >\n          <DeleteIcon />\n        </IconButton>\n        <SearchField\n          label=\"Фильтровать по участкам\"\n          type=\"search\"\n          margin=\"normal\"\n          value={this.props.searchValue}\n          onChange={this.handleSearchValueChange}\n        />\n      </Toolbar>\n    );\n  }\n  handleSearchValueChange(eventData) {\n    this.props.onChange(eventData);\n  }\n}\n\nexport default MapToolbar;\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport MapToolbar from '../components/MapToolbar';\n\nconst MapToolbarContainer = inject('toolbarStore', 'houseStore')(\n  observer(({ toolbarStore, houseStore }) => (\n    <MapToolbar\n      menuButtonPushed={toolbarStore.menuButtonPushed}\n      menuButtonClick={() => toolbarStore.toggle()}\n      clearButtonClick={() => houseStore.clearRoute()}\n      searchValue={toolbarStore.searchValue}\n      onChange={eventData => {\n        toolbarStore.setSearchValue(eventData.target.value);\n      }}\n    />\n  ))\n);\n\nexport default MapToolbarContainer;\n","import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport { styled } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport PersonIcon from '@material-ui/icons/Person';\n\nconst StyledList = styled(List)(({ theme }) => ({\n  width: 460,\n  backgroundColor: theme.palette.background.paper\n}));\n\nconst Route = props => {\n  let index = 0;\n  const listItems = props.houses.map(house => (\n    <ListItem alignItems=\"flex-start\" key={index++}>\n      <div\n        style={{\n          backgroundColor: house.zoneColor,\n          flex: '0 0 50px',\n          textAlign: 'center',\n          marginTop: '16px',\n          marginRight: '16px',\n          padding: '4px',\n          borderRadius: '4px',\n          color: '#fff'\n        }}\n      >\n        {house.zone.name}\n      </div>\n      <ListItemText\n        primary={house.address}\n        secondary={'Дата последней проверки: ' + house.date}\n      />\n      <ListItemAvatar>\n        <PersonIcon />\n      </ListItemAvatar>\n    </ListItem>\n  ));\n\n  return (\n    <Drawer\n      anchor=\"left\"\n      variant=\"persistent\"\n      open={props.visible}\n      PaperProps={{\n        style: { position: 'absolute' }\n      }}\n    >\n      <StyledList>\n        <ListItem alignItems=\"center\" key={'no-data'}>\n          <ListItemText primary={`Длина маршрута: ${props.routeDistance} м`} />\n        </ListItem>\n        {listItems.length === 0 && (\n          <ListItem alignItems=\"center\" key={'no-data'}>\n            <ListItemText primary={'Ни одного дома не добавлено'} />\n          </ListItem>\n        )}\n        {listItems}\n      </StyledList>\n    </Drawer>\n  );\n};\n\nexport default Route;\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport Route from '../components/Route';\n\nconst RouteContainer = inject('houseStore', 'toolbarStore')(\n  observer(({ houseStore, toolbarStore }) => (\n    <Route\n      visible={toolbarStore.menuButtonPushed}\n      houses={houseStore.routeHouses.slice()}\n      routeDistance={houseStore.routeDistance}\n    />\n  ))\n);\n\nexport default RouteContainer;\n","import bbox from '@turf/bbox';\nimport { randomPoint } from '@turf/random';\n\nconst HOUSE_COUNT = 50;\nconst ZONES = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.55946636199951, 55.72019767205755],\n            [37.57766246795654, 55.72019767205755],\n            [37.57766246795654, 55.72749675732418],\n            [37.55946636199951, 55.72749675732418],\n            [37.55946636199951, 55.72019767205755]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.56800651550293, 55.728946744262515],\n            [37.588176727294915, 55.728946744262515],\n            [37.588176727294915, 55.73643748562126],\n            [37.56800651550293, 55.73643748562126],\n            [37.56800651550293, 55.728946744262515]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.5787353515625, 55.73745224969486],\n            [37.60148048400879, 55.73745224969486],\n            [37.60148048400879, 55.745762657730495],\n            [37.5787353515625, 55.745762657730495],\n            [37.5787353515625, 55.73745224969486]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.60894775390625, 55.72068109737315],\n            [37.63649940490723, 55.72068109737315],\n            [37.63649940490723, 55.73087997641518],\n            [37.60894775390625, 55.73087997641518],\n            [37.60894775390625, 55.72068109737315]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.59864807128906, 55.70873874051673],\n            [37.62825965881348, 55.70873874051673],\n            [37.62825965881348, 55.71981092749662],\n            [37.59864807128906, 55.71981092749662],\n            [37.59864807128906, 55.70873874051673]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.61152267456054, 55.732474820874856],\n            [37.638559341430664, 55.732474820874856],\n            [37.638559341430664, 55.74440992120792],\n            [37.61152267456054, 55.74440992120792],\n            [37.61152267456054, 55.732474820874856]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.57890701293945, 55.69026199416489],\n            [37.61838912963867, 55.69026199416489],\n            [37.61838912963867, 55.70419291679782],\n            [37.57890701293945, 55.70419291679782],\n            [37.57890701293945, 55.69026199416489]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.53650665283203, 55.68910085982751],\n            [37.57238388061523, 55.68910085982751],\n            [37.57238388061523, 55.704579816001036],\n            [37.53650665283203, 55.704579816001036],\n            [37.53650665283203, 55.68910085982751]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.57495880126953, 55.7517527843269],\n            [37.60465621948242, 55.7517527843269],\n            [37.60465621948242, 55.76537206761647],\n            [37.57495880126953, 55.76537206761647],\n            [37.57495880126953, 55.7517527843269]\n          ]\n        ]\n      }\n    },\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [37.54199981689453, 55.75532709909638],\n            [37.57169723510742, 55.75532709909638],\n            [37.57169723510742, 55.76788290546831],\n            [37.54199981689453, 55.76788290546831],\n            [37.54199981689453, 55.75532709909638]\n          ]\n        ]\n      }\n    }\n  ]\n};\n\nclass TestDataService {\n  static getTestData() {\n    let testData = [];\n    let zoneIndex = 1;\n\n    ZONES.features.forEach(feature => {\n      const zoneBbox = bbox(feature);\n      const points = randomPoint(HOUSE_COUNT, { bbox: zoneBbox });\n      let houseNumber = 1;\n\n      points.features.forEach(pointFeature => {\n        testData.push({\n          address: `<Город> <Улица> <Дом> ${houseNumber}`,\n          position: pointFeature.geometry.coordinates.slice().reverse(),\n          date: '22.07.2014',\n          zone: {\n            name: `CЭ-${zoneIndex}`,\n            chief: {\n              name: 'Фамилия Имя Отчество',\n              photo: ''\n            }\n          }\n        });\n        houseNumber++;\n      });\n\n      zoneIndex++;\n    });\n\n    return testData;\n  }\n}\n\nexport default TestDataService;\n","import { computed, decorate, observable, action } from 'mobx';\nimport TestDataService from '../services/TestDataService';\n\nclass HouseStore {\n  houses = [];\n  routeHouses = [];\n  routeData = null;\n\n  constructor() {\n    this.houses = [];\n    this.routeHouses = [];\n    this.routeData = null;\n\n    //Установка тестового массива данных\n    this.putHouses(TestDataService.getTestData());\n  }\n\n  getHouses(searchValue) {\n    return this.houses.filter(house => {\n      return house.zone.name.includes(searchValue);\n    });\n  }\n\n  putHouses(houses) {\n    let zonePallete = [\n      '#f44336',\n      //'#e91e63',\n      '#9c27b0',\n      //'#673ab7',\n      '#3f51b5',\n      //'#2196f3',\n      '#03a9f4',\n      //'#00bcd4',\n      '#009688',\n      //'#4caf50',\n      '#8bc34a',\n      //'#cddc39',\n      '#ffeb3b',\n      //'#ffc107',\n      '#ff9800',\n      //'#ff5722',\n      '#795548',\n      //'#9e9e9e',\n      '#607d8b'\n    ];\n    let zoneColors = {};\n\n    let houseArray = [];\n    houses.forEach(house => {\n      house.indexInRoute = -1;\n      const zoneName = house.zone.name;\n      if (!zoneColors[zoneName]) {\n        zoneColors[zoneName] = zonePallete.pop() || '#607d8b';\n      }\n      house.zoneColor = zoneColors[zoneName];\n\n      houseArray.push(observable(house));\n    });\n    this.houses = houseArray;\n  }\n\n  addHouseToRoute(house) {\n    if (this.routeHouses.includes(house)) {\n      return;\n    }\n    house.indexInRoute = this.routeHouses.length;\n    this.routeHouses.push(house);\n  }\n\n  removeHouseFromRoute(house) {\n    if (\n      house.indexInRoute !== -1 &&\n      house.indexInRoute < this.routeHouses.length\n    ) {\n      this.routeHouses.splice(house.indexInRoute, 1);\n\n      //Изменение индексов в маршруте для следующих дальше домов\n      for (let i = house.indexInRoute; i < this.routeHouses.length; ++i) {\n        this.routeHouses[i].indexInRoute = i;\n      }\n\n      house.indexInRoute = -1;\n    }\n  }\n\n  getRouteHouses() {\n    return this.routeHouses;\n  }\n\n  clearRoute() {\n    this.routeHouses.forEach(house => {\n      house.indexInRoute = -1;\n    });\n    this.routeHouses.splice(0, this.routeHouses.length);\n    this.routeData = null;\n  }\n\n  setRouteData(routeData) {\n    this.routeData = routeData;\n  }\n\n  get routeDistance() {\n    let sum = 0;\n\n    if (this.routeData) {\n      this.routeData.forEach(routeDataItem => {\n        sum += routeDataItem.distance;\n      });\n    }\n\n    return sum;\n  }\n}\n\ndecorate(HouseStore, {\n  houses: observable,\n  routeHouses: observable,\n  routeData: observable,\n  fetch: action,\n  putHouses: action,\n  addHouseToRoute: action,\n  removeHouseFromRoute: action,\n  getRouteHouses: action,\n  getHouses: action,\n  clearRoute: action,\n  setRouteData: action,\n  routeDistance: computed\n});\n\nconst houseStore = new HouseStore();\n\nexport default houseStore;\nexport { HouseStore };\n","import { decorate, observable, action } from 'mobx';\n\nclass ToolbarStore {\n  menuButtonPushed = false;\n  searchValue = '';\n  searchValueDelayed = '';\n\n  constructor() {\n    this.menuButtonPushed = true;\n    this.searchValue = '';\n    this.searchValueDelayed = '';\n    this.searchValueDelayedTimeout = null;\n  }\n\n  toggle() {\n    this.menuButtonPushed = !this.menuButtonPushed;\n  }\n\n  setSearchValue(value) {\n    this.searchValue = value;\n\n    if (this.searchValueDelayedTimeout) {\n      clearTimeout(this.searchValueDelayedTimeout);\n    }\n\n    this.searchValueDelayedTimeout = setTimeout(() => {\n      this.searchValueDelayed = value;\n    }, 500);\n  }\n}\n\ndecorate(ToolbarStore, {\n  searchValue: observable,\n  searchValueDelayed: observable,\n  menuButtonPushed: observable,\n  setSearchValue: action,\n  toggle: action\n});\n\nconst toolbarStore = new ToolbarStore();\n\nexport default toolbarStore;\nexport { ToolbarStore };\n","import React, { Component } from 'react';\nimport { Provider } from 'mobx-react';\nimport Box from '@material-ui/core/Box';\nimport './App.css';\n\n/* containers */\nimport MapContainer from './containers/MapContainer';\nimport MapToolbarContainer from './containers/MapToolbarContainer';\nimport RouteContainer from './containers/RouteContainer';\n\n/* stores */\nimport houseStore from './stores/HouseStore';\nimport toolbarStore from './stores/ToolbarStore';\n\nconst boxStyle = {\n  height: '100%'\n};\n\nconst relativePos = {\n  position: 'relative'\n};\n\nconst stores = { houseStore, toolbarStore };\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider {...stores}>\n        <Box\n          display='flex'\n          flexDirection='column'\n          justify='flex-start'\n          alignItems='stretch'\n          style={boxStyle}\n        >\n          <Box>\n            <MapToolbarContainer />\n          </Box>\n          <Box flexGrow={1} minHeight={0} style={relativePos}>\n            <RouteContainer />\n            <MapContainer />\n          </Box>\n        </Box>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}